/*
 * The MIT License (MIT)
 * Copyright (c) 2022-2023. Nathan Braun
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  @author : Nathanael Braun
 *  @contact : n8tz.js@gmail.com
 */

/**
 * Note : I still have doubts on why the portals part work without bugs; but there still no bug after years of use so :D
 */

const renderSubtreeIntoContainer = require("react-dom").unstable_renderSubtreeIntoContainer,
      React                      = require('react'),
      ReactDOM                   = require('react-dom');

/**
 * Static values
 */
let layer,
    currentMenu,
    contextmenuListener,
    openPortals = [];

function isElement( o ) {
	return (
		typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
		o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string"
	);
}

/**
 * Find all dom node in the element parent hierarchy
 * @param element
 * @returns {Array} An array of dom node generated by the React ContextMenu component
 */
export function findAllMenuFrom( element ) {
	let menus = [];
	do {
		menus.push(...Array.from(element.children).filter(node => node.classList.contains("inContextMenuComp")))
		element = element.parentNode;
	} while ( element && element !== document );
	return menus;
};

/**
 * Find the react component that generate element dom node
 * @param element
 * @returns {React.Component}
 */
export function findReactComponent( element ) {
	let fiberNode, comps = [element];
	for ( const key in element ) {
		
		if ( key.startsWith('__reactInternalInstance$') || key.startsWith('__reactFiber$') ) {
			fiberNode = element[key];
			while ( fiberNode.return ) {
				if ( fiberNode.stateNode && !comps.includes(fiberNode.stateNode) )
					comps.push(fiberNode.stateNode)
				fiberNode = fiberNode.return;
			}
			
			return comps.find(n => !isElement(n));
		}
	}
	return element.parentNode && findReactComponent(element.parentNode);
};


/**
 * Render the root of the Context Menu
 * @param target
 * @param menus
 * @param renderChilds
 * @param DefaultMenuComp
 * @returns {HTMLElement}
 */
export function renderMenu( target, menus, renderChilds, DefaultMenuComp ) {
	let RComp    = DefaultMenuComp,
	    Renderer =
		    <RComp>
			    {renderChilds()}
		    </RComp>;
	
	let menu = document.createElement("div");
	target.appendChild(menu)
	
	renderSubtreeIntoContainer(menus[0], Renderer, menu);
	return menu
};

/**
 * Hoc to make sub menus renderers
 * @param render
 * @param menus
 * @param e
 * @returns {function(*): {React.Component}}
 */
export function airRender( render, menus, e ) {
	return ( Comp ) => {
		
		return class AirRCComp extends React.Component {
			
			componentDidMount() {
				openPortals.push(render(this.refs.node.parentNode, menus, e));
			}
			
			render() {
				return <Comp>
					<span ref={"node"} style={{ display: "none" }}/>
				</Comp>
			}
		}
	}
};

/**
 * Apply 'id' css anim on 'node' element during 'tm'ms
 * @param node
 * @param id
 * @param tm
 * @param cb
 */
export function applyCssAnim( node, id, tm, cb ) {
	tm      = tm || 500;
	let stm,
	    evt = ( e ) => {
		    if ( e && e.target !== node ) {
			    return;
		    }
		    clearTimeout(stm);
		    Object.assign(node.style, { animation: null });
		
		    node.removeEventListener('animationend', evt);
		    cb && cb(node);
	    };
	node.addEventListener('animationend', evt);
	
	Object.assign(node.style, { animation: id + " " + (tm / 1000) + "s forwards" });
	
	stm = setTimeout(evt, tm * 1.5);
};

/**
 * Remove all listeners (destroy the context Menu
 */
export function clearContextListeners( ContextMenu ) {
	try {
		document.body.removeChild(layer);
		document.removeEventListener(
			ContextMenu.DefaultMenuEvent,
			contextmenuListener);
		contextmenuListener = layer = null;
	} catch ( e ) {
	
	}
}

/**
 * Init the context Menu
 * @param ContextMenu
 */
export function initContextListeners( ContextMenu ) {
	
	// init overlay
	layer = document.createElement("div");
	Object.assign(layer.style, {
		pointerEvents: "none",
		position     : "fixed",
		width        : "100%",
		height       : "100%",
		top          : "0",
		left         : "0",
		zIndex       : ContextMenu.DefaultZIndex,
		display      : 'none'
	});
	layer.className = "inContextMenuLayer";
	document.body.appendChild(layer);
	
	let destroy = ( e, now ) => {
		let clear = tm => {
			layer.style.display = 'none';
			currentMenu         = null;
			openPortals.forEach(node => ReactDOM.unmountComponentAtNode(node));
			layer.innerHTML = '';
		};
		if ( !now ) {
			if ( ContextMenu.DefaultHideAnim )
				applyCssAnim(currentMenu, ContextMenu.DefaultHideAnim, ContextMenu.DefaultAnimDuration, clear);
			else setTimeout(clear, 10);
		}
		else clear();
		window.removeEventListener('resize', resize);
		window.removeEventListener('scroll', scroll);
		document.body.removeEventListener('click', destroy)
		
	}, resize, scroll;
	
	// on right click
	document.addEventListener(
		ContextMenu.DefaultMenuEvent,
		contextmenuListener = function ( e ) {
			
			if ( !ContextMenu.shouldUseContextMenu(e) )
				return;
			
			// ok we deal with this event
			e.preventDefault();
			e.stopPropagation();
			
			if ( currentMenu ) // if there an open menu
				destroy(null, true);
			
			
			let rootExclusive,
			    menuComps = findAllMenuFrom(e.target)
				    .map(findReactComponent)
				    .reduce(
					    ( list, cmp ) => {
						    if ( !cmp || rootExclusive ) return list;
						    list.push(cmp);
						    if ( cmp.props?.hasOwnProperty("root") )
							    rootExclusive = cmp;
						    return list
					    },
					    []
				    ),
			    x, y,
			    mw        = window.innerWidth,
			    mh        = window.innerHeight;
			
			if ( !menuComps.length || menuComps[0].props.hasOwnProperty('native') )
				return;
			
			document.body.addEventListener('click', destroy);
			
			layer.style.display = 'block';
			
			window.addEventListener(
				'resize',
				resize = () => {
					x  = (x / mw) * document.body.offsetWidth;
					y  = (y / mh) * document.body.offsetHeight;
					mw = window.innerWidth;
					mh = window.innerHeight;
					Object.assign(
						currentMenu.style,
						{
							top : y + 'px',
							left: x + 'px',
						}
					)
				});
			window.addEventListener(
				'scroll',
				scroll = () => {
					destroy(null, false);
				});
			currentMenu = renderMenu(
				layer,
				menuComps,
				() => {
					return <React.Fragment>{menuComps.map(( cmp, i ) => cmp.renderWithContext(menuComps, e, i))}</React.Fragment>;
				}
				, ContextMenu.DefaultMenuComp
			);
			
			openPortals.push(currentMenu);
			
			Object.assign(
				currentMenu.style,
				{
					pointerEvents: "all",
					position     : "absolute",
					display      : "flex",
					visibility   : 'hidden'
				}
			);
			
			currentMenu.className = "inContextMenu";
			
			// show on next animaton frame
			requestAnimationFrame(
				function () {
					
					x = e.x;
					y = e.y;
					
					if ( (x + currentMenu.offsetWidth) > mw )
						x -= currentMenu.offsetWidth;
					if ( (y + currentMenu.offsetHeight) > mh )
						y -= currentMenu.offsetHeight;
					
					Object.assign(
						currentMenu.style,
						{
							top       : y + 'px',
							left      : x + 'px',
							width     : currentMenu.offsetWidth + 'px',
							height    : currentMenu.offsetHeight + 'px',
							visibility: 'visible'
						}
					);
					ContextMenu.DefaultShowAnim &&
					applyCssAnim(currentMenu, ContextMenu.DefaultShowAnim, ContextMenu.DefaultAnimDuration)
				}
			);
			
			return false;
		});
};
